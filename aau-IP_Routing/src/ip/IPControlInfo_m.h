//
// Generated file, do not edit! Created by nedtool 5.2 from src/ip/IPControlInfo.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __IPCONTROLINFO_M_H
#define __IPCONTROLINFO_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "../3rdParty/IPv4Address.h"
// }}

/**
 * Enum generated from <tt>src/ip/IPControlInfo.msg:27</tt> by nedtool.
 * <pre>
 * enum ProtocolTypes
 * {
 * 
 *     ip = 4;
 *     tcp = 6;
 *     udp = 17;
 * }
 * </pre>
 */
enum ProtocolTypes {
    ip = 4,
    tcp = 6,
    udp = 17
};

/**
 * Class generated from <tt>src/ip/IPControlInfo.msg:35</tt> by nedtool.
 * <pre>
 * class IPControlInfo
 * {
 *     inet::IPv4Address destIP;
 *     inet::IPv4Address srcIP;
 *     short protocol;
 * }
 * </pre>
 */
class IPControlInfo : public ::omnetpp::cObject
{
  protected:
    inet::IPv4Address destIP;
    inet::IPv4Address srcIP;
    short protocol;

  private:
    void copy(const IPControlInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IPControlInfo&);

  public:
    IPControlInfo();
    IPControlInfo(const IPControlInfo& other);
    virtual ~IPControlInfo();
    IPControlInfo& operator=(const IPControlInfo& other);
    virtual IPControlInfo *dup() const override {return new IPControlInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual inet::IPv4Address& getDestIP();
    virtual const inet::IPv4Address& getDestIP() const {return const_cast<IPControlInfo*>(this)->getDestIP();}
    virtual void setDestIP(const inet::IPv4Address& destIP);
    virtual inet::IPv4Address& getSrcIP();
    virtual const inet::IPv4Address& getSrcIP() const {return const_cast<IPControlInfo*>(this)->getSrcIP();}
    virtual void setSrcIP(const inet::IPv4Address& srcIP);
    virtual short getProtocol() const;
    virtual void setProtocol(short protocol);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IPControlInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IPControlInfo& obj) {obj.parsimUnpack(b);}


#endif // ifndef __IPCONTROLINFO_M_H

