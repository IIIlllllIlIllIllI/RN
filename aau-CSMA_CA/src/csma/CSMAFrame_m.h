//
// Generated file, do not edit! Created by nedtool 5.2 from csma/CSMAFrame.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __CSMAFRAME_M_H
#define __CSMAFRAME_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "../3rdParty/MACAddress.h"
using namespace inet;
// }}

/**
 * Enum generated from <tt>csma/CSMAFrame.msg:8</tt> by nedtool.
 * <pre>
 * enum Type
 * {
 * 
 *     RTS = 1;
 *     CTS = 2;
 *     DATA = 3;
 *     ACK = 4;
 * 
 * }
 * </pre>
 */
enum Type {
    RTS = 1,
    CTS = 2,
    DATA = 3,
    ACK = 4
};

/**
 * Class generated from <tt>csma/CSMAFrame.msg:18</tt> by nedtool.
 * <pre>
 * packet CSMAFrame
 * {
 *     Type type;
 *     double resDuration;
 *     MACAddress src;
 *     MACAddress dest;
 * }
 * </pre>
 */
class CSMAFrame : public ::omnetpp::cPacket
{
  protected:
    Type type;
    double resDuration;
    MACAddress src;
    MACAddress dest;

  private:
    void copy(const CSMAFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CSMAFrame&);

  public:
    CSMAFrame(const char *name=nullptr, short kind=0);
    CSMAFrame(const CSMAFrame& other);
    virtual ~CSMAFrame();
    CSMAFrame& operator=(const CSMAFrame& other);
    virtual CSMAFrame *dup() const override {return new CSMAFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual Type& getType();
    virtual const Type& getType() const {return const_cast<CSMAFrame*>(this)->getType();}
    virtual void setType(const Type& type);
    virtual double getResDuration() const;
    virtual void setResDuration(double resDuration);
    virtual MACAddress& getSrc();
    virtual const MACAddress& getSrc() const {return const_cast<CSMAFrame*>(this)->getSrc();}
    virtual void setSrc(const MACAddress& src);
    virtual MACAddress& getDest();
    virtual const MACAddress& getDest() const {return const_cast<CSMAFrame*>(this)->getDest();}
    virtual void setDest(const MACAddress& dest);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CSMAFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CSMAFrame& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CSMAFRAME_M_H

